<%_
  let collection = serviceName;
  let firstItem = isPaginated ? thejson[itemsName][0] : thejson[0];
  let edit_fields = thekeys.filter(e => !(meta && meta.no_edit && meta.no_edit.includes(e)));
  let title = meta && meta.main_title ? meta.main_title : serviceNameTitleCase;
  let edit_columns = meta && meta.edit_columns ? meta.edit_columns : 2;
_%>
<template lang="pug">
.<%= serviceName %>

    include mixins.pug

    Navbar
    .section.list(v-if='status === "list"')
      .subtitle <%= title %>
      <%_ if(meta && meta.search) { -%>
      .level.panel
        form(@submit.prevent='searchAction').level-left
          .level-item
        <%_meta.search.forEach(function(searchField) {-%>
            <%_ if( !(meta && meta.no_list && meta.no_list.includes(searchField)) ) { -%>
              <%_ if(meta && meta.titles && meta.titles[searchField]) { -%>
            input.input(placeholder='<%= meta.titles[searchField] %>' v-model='search.<%=searchField%>')
              <%_ } else { -%>
            input.input(placeholder='<%=changeCase.titleCase(searchField)%>' v-model='search.<%=searchField%>')
              <%_ } -%>
            <%_ } else { -%>
            input.input(placeholder='<%=changeCase.titleCase(searchField)%>' v-model='search.<%=searchField%>')
            <%_ } -%>
        <%_})-%>
          .level-item
            button.button.is-primary(:class="{'is-loading': searching}") Buscar
        .level-right
          button.button.is-link(@click.prevent='add') Agregar
      <%_ } -%>
      progress.progress.is-small.is-primary(v-if='searching' max='100') 50

      table.table.is-bordered.is-striped.is-fullwidth.is-hoverable
        thead
          tr
        <%_ thekeys.forEach(function(e) { -%>
            <%_ if( !(meta && meta.no_list && meta.no_list.includes(e)) ) { -%>
              <%_ if(meta && meta.titles && meta.titles[e]) { -%>
            th <%= meta.titles[e] %>
              <%_ } else { -%>
            th <%= changeCase.titleCase(e) %>
              <%_ } -%>
            <%_ } -%>
        <%_ }) -%>
            th Acciones
        tbody(v-for='row in <%= collection %>List')
          tr
        <%_ thekeys.forEach(function(e) { -%>
          <%_ if( !(meta && meta.no_list && meta.no_list.includes(e)) ) { -%>
            <%_ if(typeof firstItem[e] === 'boolean') { -%>
            td {{ row.<%= e %> ? 'Si' : 'No' }}
            <%_ } else if(typeof firstItem[e] === 'number') { -%>
              <%_if(meta && meta.currency_fields && meta.currency_fields.includes(e)) {-%>
            td {{ row.<%= e %> | currencyFmt }}
              <%_ } else { -%>
            td {{ row.<%= e %> }}
              <%_ } -%>
            <%_ } else { -%>
              <%_if(meta && meta.date_fields && meta.date_fields.includes(e)) {-%>
            td {{ row.<%= e %>  | dateFmt }}
              <%_ } else { -%>
            td {{ row.<%= e %> }}
              <%_ } -%>
            <%_ } -%>
          <%_ } -%>
        <%_ }) -%>
            td.has-text-centered
              button.button.is-primary(@click.prevent='edit(row)') Editar

      PaginationView(v-if='pagination' :page="pagination.page" :pages="pagination.pages" @selected="searchAction")

    .section.detail(v-else @keyup.esc='status = "list"')
      h2.subtitle Detalles de <%= title %>
      form.form
      <%_ edit_fields.forEach(function(e, index) { -%>
        <%_ if(index == 0) { -%>
        .columns
        <%_ } -%>
        <%_ if(index > 0 && index % edit_columns == 0) { -%>
        .columns
        <%_ } -%>
        <%_ if( !(meta && meta.no_edit && meta.no_edit.includes(e)) ) { -%>
          <%_ var fieldTitle = meta && meta.titles && meta.titles[e] ? meta.titles[e] : changeCase.titleCase(e) -%>
          <%_
          function lastParamsPug(field, index) {
            if(meta && meta.max_length) {
              if(index == 0 && meta.max_length[field]) {
              _%>, '<%=e%>Input', <%=meta.max_length[field]%><%_
              } else if (index == 0) {
              _%>, '<%=e%>Input'<%_
              } else if (meta.max_length && meta.max_length[field]) {
              _%>, null, <%=meta.max_length[field]%><%_
              }
            } else if (index == 0) {
            _%>, '<%=e%>Input'<%_
            }
          }
          function lastParams(field, index) {
            if (index == 0) {
            -%> ref='<%=e%>Input'<%_
            }
            if (meta.max_length && meta.max_length[field]) {
            -%> maxLength='<%=meta.max_length[field]%>'<%_
            }
          }
          -%>
          <%_ if(typeof firstItem[e] === 'boolean') { -%>
            +checkboxField('<%= fieldTitle %>', '<%= collection %>Instance.<%=e%>')
          <%_ } else if(typeof firstItem[e] === 'number') { -%>
            <%_if(meta && meta.currency_fields && meta.currency_fields.includes(e)) {-%>
            +currencyField('<%= fieldTitle %>', '<%= collection %>Instance.<%=e%>'<%_lastParamsPug(e, index)-%>)
            <%_ } else { -%>
            NumberField(label='<%= fieldTitle %>' v-model='<%= collection %>Instance.<%=e%>'<%_lastParams(e, index)-%>)
            <%_ } -%>
          <%_ } else { -%>
            <%_if(meta && meta.date_fields && meta.date_fields.includes(e)) {-%>
            +dateField('<%= fieldTitle %>', '<%= collection %>Instance.<%=e%>'<%_lastParamsPug(e, index)-%>)
            <%_ } else { -%>
            TextField(label='<%= fieldTitle %>' v-model='<%= collection %>Instance.<%=e%>'<%_lastParams(e, index)-%>)
            <%_ } -%>
          <%_ } -%>
        <%_ } -%>
      <%_ }) -%>
        .level.panel
          .level-left
            button.button.level-item.is-primary(v-if='status === "add"' @click.prevent='save(<%= collection %>Instance)') Guardar
            button.button.level-item.is-primary(v-if='status === "edit"' @click.prevent='update(<%= collection %>Instance)') Actualizar
            button.button.level-item.is-info(@click.prevent='status = "list"') Volver
          .level-right
            confirm-dialog-button(v-if='status === "edit"' button-title='Borrar' button-class='is-danger'
              title="¿Borrar el registro?" message='¿Está seguro que desea borrar el registro?'
              @confirmed='remove(<%= collection %>Instance)')

</template>

<script>

import Navbar from '@/components/Navbar.vue'
import CrudBase from '@/components/CrudBase.vue'
import ConfirmDialogButton from '@/components/dialogs/ConfirmDialogButton.vue'
import PaginationView from '@/components/PaginationView.vue'
import {HTTP} from '@/http'
import TextField from "../components/TextField";
import InputField from "../components/InputField";
import NumberField from "../components/NumberField";

export default {
  extends: CrudBase,
  data () {
    return {
      <%= collection %>List: [],
      <%= collection %>Instance: {},
      search: {
      <%_ if(meta && meta.search) { -%>
        <%_meta.search.forEach(function(searchField) {-%>
        <%= searchField %>: null,
        <%_})-%>
      <%_ } -%>
      },
      pagination: null,
      searching: false,
      status: 'list'
    }
  },
  components: {
    TextField, InputField, NumberField,
    PaginationView,
    Navbar, ConfirmDialogButton
  },
  created: function() {
    this.searchAction()
  },
  methods: {
    searchAction: async function (page) {
      this.searching = true
      try {
          <%_ if(meta && meta.search) { -%>
        let results = (await HTTP.post('/search/<%= serviceName %>', this.search, {
          params: {
            page: page ? page : null
          }
        })).data
          <%_ } else { -%>
        let results = (await HTTP.get('/<%= serviceName %>', {
          params: {
            page: page ? page : null
          }
        })).data
          <%_ } -%>
        this.pagination = {
          page: results.page,
          pages: results.pages
        }
        this.<%= collection %>List = results.items
      } catch (error) {
        console.log(error)
        this.<%= collection %>List = []
        this.pagination = null
      } finally {
        this.searching = false
      }
    },
    add: function () {
      this.status = 'add'
      this.<%= collection%>Instance = {}
      <%_ if(edit_fields && edit_fields.length > 0) { -%>
      this.$nextTick(() => this.$refs.<%= edit_fields[0] %>Input.focus())
      <%_ } -%>
    },
    edit: function (instance) {
      this.status = 'edit'
      this.<%= collection %>Instance = instance
      <%_ if(edit_fields && edit_fields.length > 0) { -%>
      this.$nextTick(() => this.$refs.<%= edit_fields[0] %>Input.focus())
      <%_ } -%>
    },
    update: function(instance) {
      this._put(`/<%= collection%>/${instance.id}`, instance)
    },
    save: function (instance) {
      this._post('/<%= collection %>', instance, res => this.<%= collection %>List.push(res.data))
    },
    remove: function (instance) {
      this._delete(`/<%= collection %>/${instance.id}`, () => this.searchAction())
    }
  }
}
</script>
